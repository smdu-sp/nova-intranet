// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// ===== MODEL CMS PAGES =====
model CMSPage {
    id                 Int      @id @default(autoincrement())
    title              String   @db.VarChar(255)
    slug               String   @unique @db.VarChar(255)
    content            String   @db.LongText
    featured_image     String?  @db.VarChar(500) // Imagem principal/destacada
    meta_description   String?  @db.Text // Descrição para SEO
    is_published       Boolean  @default(false)
    created_by         String   @default("admin") @db.VarChar(100) // Quem criou a página
    created_by_user_id Int? // ID do usuário que criou a página
    created_at         DateTime @default(now())
    updated_at         DateTime @updatedAt

    // Relacionamentos
    images          CMSPageImage[]
    created_by_user User?          @relation("PageAuthor", fields: [created_by_user_id], references: [id])

    @@index([created_by])
    @@index([created_by_user_id])
    @@map("cms_pages")
}

// ===== MODEL CMS PAGE IMAGES =====
model CMSPageImage {
    id             Int      @id @default(autoincrement())
    page_id        Int
    image_url      String   @db.VarChar(500)
    alt_text       String?  @db.VarChar(255)
    caption        String?  @db.Text
    order_position Int      @default(0)
    is_featured    Boolean  @default(false)
    created_at     DateTime @default(now())
    updated_at     DateTime @updatedAt

    // Relacionamentos
    page CMSPage @relation(fields: [page_id], references: [id], onDelete: Cascade)

    @@index([page_id])
    @@index([order_position])
    @@map("cms_page_images")
}

// ===== MODEL NAVIGATION MENUS =====
model NavigationMenu {
    id         Int      @id @default(autoincrement())
    name       String   @db.VarChar(100)
    location   String   @db.VarChar(50) // header, footer, sidebar
    is_active  Boolean  @default(true)
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    // Relacionamentos
    menuItems MenuItem[]

    @@index([location])
    @@index([is_active])
    @@map("navigation_menus")
}

// ===== MODEL MENU ITEMS (4 níveis hierárquicos) =====
model MenuItem {
    id             Int      @id @default(autoincrement())
    menu_id        Int
    parent_id      Int?
    level          Int      @default(1) // 1=principal, 2=submenu, 3=sub-submenu, 4=sub-sub-submenu
    title          String   @db.VarChar(100)
    url            String   @db.VarChar(255)
    target         String   @default("_self") @db.VarChar(20)
    order_position Int      @default(0)
    is_active      Boolean  @default(true)
    has_children   Boolean  @default(false)
    created_at     DateTime @default(now())
    updated_at     DateTime @updatedAt

    // Relacionamentos
    menu     NavigationMenu @relation(fields: [menu_id], references: [id], onDelete: Cascade)
    parent   MenuItem?      @relation("MenuItemHierarchy", fields: [parent_id], references: [id], onDelete: SetNull)
    children MenuItem[]     @relation("MenuItemHierarchy")

    @@index([menu_id])
    @@index([parent_id])
    @@index([level])
    @@index([order_position])
    @@index([is_active])
    @@map("menu_items")
}

// ===== MODEL BLOG POSTS =====
model BlogPost {
    id               Int        @id @default(autoincrement())
    title            String     @db.VarChar(255)
    slug             String     @unique @db.VarChar(255)
    excerpt          String?    @db.Text
    content          String     @db.LongText
    featured_image   String?    @db.VarChar(255)
    author           String     @default("admin") @db.VarChar(100)
    author_user_id   Int? // ID do usuário que criou o post
    status           PostStatus @default(draft)
    published_at     DateTime?
    created_at       DateTime   @default(now())
    updated_at       DateTime   @updatedAt
    meta_title       String?    @db.VarChar(255)
    meta_description String?    @db.Text
    tags             Json? // Array de tags em formato JSON

    // Relacionamentos
    author_user User?     @relation("PostAuthor", fields: [author_user_id], references: [id])
    comments    Comment[]
    likes       Like[]

    @@index([slug])
    @@index([status])
    @@index([published_at])
    @@index([author])
    @@index([author_user_id])
    @@map("blog_posts")
}

// ===== MODEL USERS =====
model User {
    id           Int       @id @default(autoincrement())
    username     String    @unique @db.VarChar(100) // sAMAccountName do LDAP
    email        String?   @db.VarChar(255)
    display_name String?   @db.VarChar(255) // displayName do LDAP
    full_name    String?   @db.VarChar(255) // cn do LDAP
    role         UserRole  @default(user)
    is_active    Boolean   @default(true)
    last_login   DateTime?
    created_at   DateTime  @default(now())
    updated_at   DateTime  @updatedAt

    // Relacionamentos
    comments      Comment[]
    likes         Like[]
    created_posts BlogPost[] @relation("PostAuthor")
    created_pages CMSPage[]  @relation("PageAuthor")

    @@index([username])
    @@index([email])
    @@index([role])
    @@index([is_active])
    @@map("users")
}

// ===== MODEL COMMENTS =====
model Comment {
    id          Int      @id @default(autoincrement())
    post_id     Int
    user_id     Int
    content     String   @db.Text
    is_approved Boolean  @default(false)
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt

    // Relacionamentos
    post BlogPost @relation(fields: [post_id], references: [id], onDelete: Cascade)
    user User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@index([post_id])
    @@index([user_id])
    @@index([is_approved])
    @@map("comments")
}

// ===== MODEL LIKES =====
model Like {
    id         Int      @id @default(autoincrement())
    post_id    Int
    user_id    Int
    created_at DateTime @default(now())

    // Relacionamentos
    post BlogPost @relation(fields: [post_id], references: [id], onDelete: Cascade)
    user User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@unique([post_id, user_id]) // Um usuário só pode dar like uma vez por post
    @@index([post_id])
    @@index([user_id])
    @@map("likes")
}

// ===== ENUMS =====
enum PostStatus {
    draft
    published
    archived
}

enum UserRole {
    admin
    user
}
